// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  password      String
  name          String
  accountType   String   // 'business' | 'individual'
  phone         String?
  avatar        String?
  verified      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Business specific fields
  company       Company?
  products      Product[]
  requirements  Requirement[]
  responses     Response[]
  orders        Order[]
  reviews       Review[]
}

model Company {
  id            Int      @id @default(autoincrement())
  name          String
  description   String?
  logo          String?
  website       String?
  type          String   // manufacturer, wholesaler, retailer, etc.
  size          String?  // small, medium, large
  founded       Int?
  registrationNo String?
  verified      Boolean  @default(false)
  
  // Address
  address       String?
  city          String?
  state         String?
  country       String
  postalCode    String?
  
  // Contact
  contactEmail  String?
  contactPhone  String?
  
  // Business Categories
  categories    CategoryOnCompany[]
  
  // Relations
  user          User     @relation(fields: [userId], references: [id])
  userId        Int      @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Product {
  id            Int      @id @default(autoincrement())
  name          String
  description   String
  sku           String?  @unique
  price         Decimal
  moq           Int      // Minimum Order Quantity
  unit          String   // pieces, kg, etc.
  currency      String   @default("USD")
  inStock       Boolean  @default(true)
  stockQuantity Int?
  
  // Media
  images        ProductImage[]
  videos        ProductVideo[]
  
  // Specifications
  specifications Json?
  
  // Categories and Tags
  category      Category    @relation(fields: [categoryId], references: [id])
  categoryId    Int
  tags          TagOnProduct[]
  
  // Relations
  user          User     @relation(fields: [userId], references: [id])
  userId        Int
  orders        OrderItem[]
  reviews       Review[]
  
  // Metadata
  featured      Boolean  @default(false)
  status        String   @default("draft") // draft, published, archived
  views         Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  url       String
  alt       String?
  primary   Boolean  @default(false)
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
}

model ProductVideo {
  id        Int      @id @default(autoincrement())
  url       String
  thumbnail String?
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  icon        String?
  slug        String   @unique
  parentId    Int?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
  companies   CategoryOnCompany[]
}

model CategoryOnCompany {
  company     Company  @relation(fields: [companyId], references: [id])
  companyId   Int
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int
  primary     Boolean  @default(false)

  @@id([companyId, categoryId])
}

model Tag {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  products    TagOnProduct[]
}

model TagOnProduct {
  product     Product  @relation(fields: [productId], references: [id])
  productId   Int
  tag         Tag      @relation(fields: [tagId], references: [id])
  tagId       Int

  @@id([productId, tagId])
}

model Requirement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int
  quantity    Int
  unit        String
  budget      Decimal?
  currency    String   @default("USD")
  deadline    DateTime
  location    String
  status      String   @default("open") // open, in-progress, closed
  
  // Relations
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  responses   Response[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Response {
  id            Int      @id @default(autoincrement())
  message       String
  price         Decimal?
  quantity      Int?
  deliveryTime  String?
  attachments   String[]
  status        String   @default("pending") // pending, accepted, rejected
  
  // Relations
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  requirement   Requirement @relation(fields: [requirementId], references: [id])
  requirementId Int
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Order {
  id            Int      @id @default(autoincrement())
  orderNumber   String   @unique
  status        String   // pending, confirmed, shipped, delivered, cancelled
  totalAmount   Decimal
  currency      String   @default("USD")
  
  // Shipping
  shippingAddress String
  shippingCity    String
  shippingState   String?
  shippingCountry String
  shippingZip     String
  trackingNumber  String?
  
  // Relations
  user          User     @relation(fields: [userId], references: [id])
  userId        Int
  items         OrderItem[]
  payment       Payment?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model OrderItem {
  id          Int      @id @default(autoincrement())
  quantity    Int
  unitPrice   Decimal
  totalPrice  Decimal
  
  // Relations
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     Int
  product     Product  @relation(fields: [productId], references: [id])
  productId   Int
}

model Payment {
  id            Int      @id @default(autoincrement())
  amount        Decimal
  currency      String   @default("USD")
  status        String   // pending, completed, failed, refunded
  method        String   // credit_card, bank_transfer, etc.
  transactionId String?
  
  // Relations
  order         Order    @relation(fields: [orderId], references: [id])
  orderId       Int      @unique
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Review {
  id          Int      @id @default(autoincrement())
  rating      Int      // 1-5
  comment     String?
  
  // Relations
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  product     Product  @relation(fields: [productId], references: [id])
  productId   Int
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}